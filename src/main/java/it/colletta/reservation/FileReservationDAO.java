/*
 * Created on Mar 29, 2004
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
package it.colletta.reservation;

import it.colletta.Configuration;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;

/**
 * @author janb
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public class FileReservationDAO implements ReservationDAO
{

    private static final String DEFAULTROOT = ".";
    private static final String CURRENT = "current";
    private String root = null;
    private File resRootDir;
    private final SimpleDateFormat format = new SimpleDateFormat ("yyyyMMddHHmm");
    
    
    public FileReservationDAO ()
    throws Exception
    {
        
        this(Configuration.getInstance().getProperty("root.dir", DEFAULTROOT));
    }
    
    public FileReservationDAO (String root)
    throws Exception
    {
        this.root = root;
        //make a reservations directory under the root
        File rootDir = new File (root);
        if (!rootDir.exists() || !rootDir.isDirectory())
            throw new IllegalArgumentException(this.root+ "either is not a directory or not writeable");
        resRootDir = new File (rootDir, "reservations");
        resRootDir.mkdir();
    }

    /** 
     * Save the reservation to filesystem
     * @see it.colletta.reservation.ReservationDAO#save(it.colletta.reservation.ReservationData)
     */
    public void save(ReservationData rd) throws Exception
    {
        if ((rd.getId() == null) || (rd.getId().trim().length() == 0))
            throw new IllegalArgumentException ("Reservation has no id");
        
      
        File resDir = new File (resRootDir, rd.getId());
        
        //if this is the first time this is saved, created the directory first
        if (!resDir.exists())
            resDir.mkdir();
        
        //rename the current file
        File currFile = new File (resDir, CURRENT+".res");
        File oldFile = new File (resDir, format.format(new Date())+".res");
        if (currFile.exists())
            currFile.renameTo(oldFile);
        
        
        //write the reservation out as a new current property file UTF-8 encoded
        File resFile = new File (resDir, CURRENT+".res");       
        Properties props = ReservationPropertyConverter.toProperties (rd);
        PrintWriter out=new PrintWriter(new FileWriter(resFile,false));
        out.println("# Generated by Colletta");

        ArrayList keys = new ArrayList(props.keySet());
        Collections.sort(keys);
        Iterator i=keys.iterator();
        while(i.hasNext())
        {
            String p=(String)i.next();
            String v=URLEncoder.encode((String)props.get(p),"UTF-8");
            out.println(p+": "+v);
        }
        out.flush();
        out.close();
        
    }

    /**
     * Load a reservation from filesystem
     * @see it.colletta.reservation.ReservationDAO#load(java.lang.String)
     */
    public ReservationData load(String resId) throws Exception
    {
        File resDir = new File (resRootDir, resId);
        //if this is the first time this is saved, created the directory first
        if (!resDir.exists())
            throw new IllegalStateException ("Reservation "+resId+" does not exist");
        File resFile = new File(resDir, CURRENT+".res"); 
        
        if (!resFile.exists())
            return null;
        
        return loadFromFile (resFile);
        
 
    }

    /**
     * Load all of the persisted reservations
     * @see it.colletta.reservation.ReservationDAO#loadAll()
     */
    public ReservationData[] loadAll() throws Exception
    {
        Set rdset = new HashSet();
        File[] files = resRootDir.listFiles();
        if (files == null)
            return null;
        
        for (int i=0; i< files.length; i++)
        {
            if (files[i].isDirectory())
            {
                File current = new File (files[i], "current.res");
                if (current.exists())
                    rdset.add(loadFromFile(current));
            }
        }
        return (ReservationData[])rdset.toArray(new ReservationData[0]);
    }
    
    
    

    
    /**
     * Load a reservation from a file
     * @param f
     * @return
     * @throws Exception
     */
    private ReservationData loadFromFile (File f)
    throws Exception
    {
        Properties props = new Properties();
        FileInputStream is = new FileInputStream (f);
        props.load(is);

        Iterator iter = props.keySet().iterator();
        while (iter.hasNext())
        {
            String p = (String)iter.next();
            props.setProperty(p, URLDecoder.decode(props.getProperty(p),"UTF-8"));
        }
        
        ReservationData rd = ReservationPropertyConverter.toObject(props);  
        return rd;
    }
}
